{
  "stats": {
    "suites": 7,
    "tests": 18,
    "passes": 8,
    "pending": 0,
    "failures": 10,
    "start": "2022-10-18T04:25:02.611Z",
    "end": "2022-10-18T04:25:51.109Z",
    "duration": 48498,
    "testsRegistered": 18,
    "passPercent": 44.44444444444444,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f619485f-1b2e-440e-a72b-59c57c1cb1f1",
      "title": "",
      "fullFile": "cypress/e2e/public.cy.js",
      "file": "cypress/e2e/public.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "172727db-0a36-44a7-827a-89bf489eb3a6",
          "title": "Hack#1 Public Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bee7dc83-439b-49d6-81d3-40bb4b0261f1",
              "title": "Problem 1",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1-1 Keyboard-container exists and the third row is correct",
                  "fullTitle": "Hack#1 Public Test Problem 1 1-1 Keyboard-container exists and the third row is correct",
                  "timedOut": null,
                  "duration": 276,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.Keyboard-container').should('be.visible');",
                  "err": {},
                  "uuid": "56c7ead0-ae40-4ca8-9540-d3cb6ccacfd4",
                  "parentUUID": "bee7dc83-439b-49d6-81d3-40bb4b0261f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "1-2-1 Keyboard-container first row correct",
                  "fullTitle": "Hack#1 Public Test Problem 1 1-2-1 Keyboard-container first row correct",
                  "timedOut": null,
                  "duration": 93,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = 'q w e r t y u i o p'.split(' ');\ncy.get('.Keyboard-container > #KBrow_1').should('have.class', 'Keyboard-row').children().should('have.length', 10);\ncy.get('.Keyboard-container > #KBrow_1').children().each(($el, index) => {\n  cy.wrap($el).should('have.text', chars[index]).should('have.id', 'char_' + chars[index]);\n});",
                  "err": {},
                  "uuid": "ea1bea7a-395d-4c6c-8ee8-80f13fa882e6",
                  "parentUUID": "bee7dc83-439b-49d6-81d3-40bb4b0261f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "1-2-2 Keyboard-container second row correct",
                  "fullTitle": "Hack#1 Public Test Problem 1 1-2-2 Keyboard-container second row correct",
                  "timedOut": null,
                  "duration": 75,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = 'a s d f g h j k l'.split(' ');\ncy.get('.Keyboard-container > #KBrow_2').should('have.class', 'Keyboard-row').children().should('have.length', 9);\ncy.get('.Keyboard-container > #KBrow_2').children().each(($el, index) => {\n  cy.wrap($el).should('have.text', chars[index]).should('have.id', 'char_' + chars[index]);\n});",
                  "err": {},
                  "uuid": "cf53ca15-3650-4570-8864-a5caa4ca2830",
                  "parentUUID": "bee7dc83-439b-49d6-81d3-40bb4b0261f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "56c7ead0-ae40-4ca8-9540-d3cb6ccacfd4",
                "ea1bea7a-395d-4c6c-8ee8-80f13fa882e6",
                "cf53ca15-3650-4570-8864-a5caa4ca2830"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 444,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4f6b7098-ed01-408e-99ba-f3c744512008",
              "title": "Problem 2",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "2-1 Board-container exists",
                  "fullTitle": "Hack#1 Public Test Problem 2 2-1 Board-container exists",
                  "timedOut": null,
                  "duration": 45,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.Board-container').should('be.visible');",
                  "err": {},
                  "uuid": "3f7300db-24bd-4464-b9bc-6eda47109553",
                  "parentUUID": "4f6b7098-ed01-408e-99ba-f3c744512008",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2-2-1 There are six Row-containers",
                  "fullTitle": "Hack#1 Public Test Problem 2 2-2-1 There are six Row-containers",
                  "timedOut": null,
                  "duration": 42,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.Board-container > .Row-container').should('have.length', 6);",
                  "err": {},
                  "uuid": "c1b985b4-d265-4f3b-afed-d33c9afa82b4",
                  "parentUUID": "4f6b7098-ed01-408e-99ba-f3c744512008",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2-2-2 CurRow is at the first row",
                  "fullTitle": "Hack#1 Public Test Problem 2 2-2-2 CurRow is at the first row",
                  "timedOut": null,
                  "duration": 43,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.Board-container > .Row-container').children().eq(0).should('have.class', 'current');",
                  "err": {},
                  "uuid": "85803fb7-53a0-46b4-8236-abb661460441",
                  "parentUUID": "4f6b7098-ed01-408e-99ba-f3c744512008",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f7300db-24bd-4464-b9bc-6eda47109553",
                "c1b985b4-d265-4f3b-afed-d33c9afa82b4",
                "85803fb7-53a0-46b4-8236-abb661460441"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 130,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "414612f4-b898-43c9-94ab-dc8328e8a13e",
              "title": "Problem 3",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "3-1 curGuess is rendered onto CurRow",
                  "fullTitle": "Hack#1 Public Test Problem 3 3-1 curGuess is rendered onto CurRow",
                  "timedOut": null,
                  "duration": 4124,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('body').type('{a}');\ncy.get('.Row-wrapper.current').children().eq(0).should('have.text', 'a').and('have.id', '0-0');\ncy.get('body').type('{b}').type('{c}').type('{e}');\ncy.get('.Row-wrapper.current').children().eq(1).should('have.text', 'b').and('have.id', '0-1');\ncy.get('.Row-wrapper.current').children().eq(2).should('have.text', 'c').and('have.id', '0-2');\ncy.get('.Row-wrapper.current').children().eq(3).should('have.text', 'e').and('have.id', '0-3');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: expected '<div.Row-wordbox>' to have id '0-0'",
                    "estack": "AssertionError: Timed out retrying after 4000ms: expected '<div.Row-wordbox>' to have id '0-0'\n    at Context.eval (webpack:///./cypress/e2e/public.cy.js:69:38)",
                    "diff": null
                  },
                  "uuid": "759d6e0e-144a-4c76-8032-024ef77d2308",
                  "parentUUID": "414612f4-b898-43c9-94ab-dc8328e8a13e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3-2 Type more than 5 letters",
                  "fullTitle": "Hack#1 Public Test Problem 3 3-2 Type more than 5 letters",
                  "timedOut": null,
                  "duration": 4455,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const test = ['a', 'b', 'c', 'd', 'e', 'f'];\nfor (let i = 0; i < test.length; i += 1) {\n  cy.get('body').type(`{${test[i]}}`);\n}\ncy.get('.Row-wrapper.current').children().each(($el, index) => {\n  cy.wrap($el).should('have.text', test[index]).and('have.id', '0-' + index);\n});",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: expected '<div.Row-wordbox>' to have id '0-0'",
                    "estack": "AssertionError: Timed out retrying after 4000ms: expected '<div.Row-wordbox>' to have id '0-0'\n    at Context.eval (webpack:///./cypress/e2e/public.cy.js:83:62)",
                    "diff": null
                  },
                  "uuid": "f7968569-57e9-4993-a36b-dda104cbbc7e",
                  "parentUUID": "414612f4-b898-43c9-94ab-dc8328e8a13e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3-3 Backspace is working",
                  "fullTitle": "Hack#1 Public Test Problem 3 3-3 Backspace is working",
                  "timedOut": null,
                  "duration": 534,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const test = ['z', 'x', 'c', 'v', 'backspace', 'b', 'n'];\nconst ans = ['z', 'x', 'c', 'b', 'n'];\nfor (let i = 0; i < test.length; i += 1) {\n  cy.get('body').type(`{${test[i]}}`);\n}\ncy.get('.Row-wrapper.current').children().each(($el, index) => {\n  cy.wrap($el).should('have.text', ans[index]);\n});",
                  "err": {},
                  "uuid": "5047870b-3cc4-4c7a-8ae1-693de12a9541",
                  "parentUUID": "414612f4-b898-43c9-94ab-dc8328e8a13e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3-4 Filled wordboxes should have class filled",
                  "fullTitle": "Hack#1 Public Test Problem 3 3-4 Filled wordboxes should have class filled",
                  "timedOut": null,
                  "duration": 4049,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.Row-wrapper.current').children().each(($el, index) => {\n  cy.wrap($el).not('have.class', 'filled');\n});\ncy.get('body').type('{z}').type('{x}');\ncy.get('.Row-wrapper.current').children().each(($el, index) => {\n  if (index < 2) {\n    if (index == 0) cy.wrap($el).should('have.text', 'z').and('have.class', 'filled');else if (index == 1) cy.wrap($el).should('have.text', 'x').and('have.class', 'filled');\n  } else {\n    cy.wrap($el).not('have.class', 'filled');\n    cy.wrap($el).should('have.text', '');\n  }\n});",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: ``, but never found it. Queried from element: <div.Row-wrapper.current>",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: ``, but never found it. Queried from element: <div.Row-wrapper.current>\n    at Context.eval (webpack:///./cypress/e2e/public.cy.js:100:13)",
                    "diff": null
                  },
                  "uuid": "b92ca583-cd7c-47d3-aaaf-437403650522",
                  "parentUUID": "414612f4-b898-43c9-94ab-dc8328e8a13e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5047870b-3cc4-4c7a-8ae1-693de12a9541"
              ],
              "failures": [
                "759d6e0e-144a-4c76-8032-024ef77d2308",
                "f7968569-57e9-4993-a36b-dda104cbbc7e",
                "b92ca583-cd7c-47d3-aaaf-437403650522"
              ],
              "pending": [],
              "skipped": [],
              "duration": 13162,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3b77a6c-caaa-4cee-a97a-99b0708e49e4",
              "title": "Problem 4",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "4-1 CurRow change after pressing enter",
                  "fullTitle": "Hack#1 Public Test Problem 4 4-1 CurRow change after pressing enter",
                  "timedOut": null,
                  "duration": 467,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const test = ['a', 'b', 'c', 'd', 'e', 'enter'];\nfor (let i = 0; i < test.length; i += 1) {\n  cy.get('body').type(`{${test[i]}}`);\n}\ncy.get('.Board-container').children().eq(0).get('.Row-wrapper').not('have.class', 'current');\ncy.get('.Board-container').children().eq(1).get('.Row-wrapper').should('have.class', 'current');",
                  "err": {},
                  "uuid": "5d1dc6c4-8f99-4331-9712-4152a1f92596",
                  "parentUUID": "b3b77a6c-caaa-4cee-a97a-99b0708e49e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4-2 Green rendered correctly (only one line)",
                  "fullTitle": "Hack#1 Public Test Problem 4 4-2 Green rendered correctly (only one line)",
                  "timedOut": null,
                  "duration": 4459,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const test = ['m', 'a', 'n', 'a', 's', 'enter'];\nconst answer = ['green', 'grey', 'green', 'grey', 'green'];\nfor (let i = 0; i < test.length; i += 1) {\n  cy.get('body').type(`{${test[i]}}`);\n}\ncy.get('.Board-container > .Row-container > .Row-wrapper').eq(0).children().each(($el, index) => {\n  cy.wrap($el).should('have.class', answer[index]).and('have.text', test[index]);\n});",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: expected '<div.Row-wordbox>' to have class 'green'",
                    "estack": "AssertionError: Timed out retrying after 4000ms: expected '<div.Row-wordbox>' to have class 'green'\n    at Context.eval (webpack:///./cypress/e2e/public.cy.js:147:29)",
                    "diff": null
                  },
                  "uuid": "ba863538-f64b-4824-8bca-80482f13438f",
                  "parentUUID": "b3b77a6c-caaa-4cee-a97a-99b0708e49e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4-3 Green and yellow rendered correctly (only one line)",
                  "fullTitle": "Hack#1 Public Test Problem 4 4-3 Green and yellow rendered correctly (only one line)",
                  "timedOut": null,
                  "duration": 4463,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const test = ['a', 'i', 'u', 'b', 'm', 'enter'];\nconst answer = ['grey', 'green', 'yellow', 'grey', 'yellow'];\nfor (let i = 0; i < test.length; i += 1) {\n  cy.get('body').type(`{${test[i]}}`);\n}\ncy.get('.Board-container > .Row-container > .Row-wrapper').eq(0).children().each(($el, index) => {\n  cy.wrap($el).should('have.class', answer[index]).and('have.text', test[index]);\n});",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: expected '<div.Row-wordbox>' to have class 'grey'",
                    "estack": "AssertionError: Timed out retrying after 4000ms: expected '<div.Row-wordbox>' to have class 'grey'\n    at Context.eval (webpack:///./cypress/e2e/public.cy.js:159:29)",
                    "diff": null
                  },
                  "uuid": "6ba4dfeb-5f64-4a88-b1f3-5c7129acafa8",
                  "parentUUID": "b3b77a6c-caaa-4cee-a97a-99b0708e49e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4-4 Multiple Lines Test",
                  "fullTitle": "Hack#1 Public Test Problem 4 4-4 Multiple Lines Test",
                  "timedOut": null,
                  "duration": 6056,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const tests = [['z', 'x', 'c', 'v', 'b', 'enter'], ['m', 'a', 'b', 'c', 'u', 'enter'], ['b', 'a', 'n', 'f', 's', 'enter'], ['m', 'u', 'n', 'a', 's', 'enter'], ['m', 'i', 'n', 'u', 's', 'enter']];\nconst answers = [['grey', 'grey', 'grey', 'grey', 'grey'], ['green', 'grey', 'grey', 'grey', 'yellow'], ['grey', 'grey', 'green', 'grey', 'green'], ['green', 'yellow', 'green', 'grey', 'green'], ['green', 'green', 'green', 'green', 'green']];\nfor (let line = 0; line < tests.length; line += 1) {\n  for (let i = 0; i < tests[0].length; i += 1) {\n    cy.get('body').type(`{${tests[line][i]}}`);\n  }\n}\ncy.get('.Board-container').children().each(($el, line) => {\n  if (line < answers.length) {\n    cy.wrap($el).children().eq(0).children().each(($el, i) => {\n      cy.wrap($el).should('have.text', tests[line][i]).should('have.class', answers[line][i]).should('have.id', line + '-' + i);\n    });\n  }\n});",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: expected '<div.Row-wordbox>' to have class 'grey'",
                    "estack": "AssertionError: Timed out retrying after 4000ms: expected '<div.Row-wordbox>' to have class 'grey'\n    at Context.eval (webpack:///./cypress/e2e/public.cy.js:192:25)",
                    "diff": null
                  },
                  "uuid": "db8a0e4f-22d7-481d-8776-33e2d153c735",
                  "parentUUID": "b3b77a6c-caaa-4cee-a97a-99b0708e49e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d1dc6c4-8f99-4331-9712-4152a1f92596"
              ],
              "failures": [
                "ba863538-f64b-4824-8bca-80482f13438f",
                "6ba4dfeb-5f64-4a88-b1f3-5c7129acafa8",
                "db8a0e4f-22d7-481d-8776-33e2d153c735"
              ],
              "pending": [],
              "skipped": [],
              "duration": 15445,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d367a401-84f1-428f-8317-b2e67be7e345",
              "title": "Problem 5",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "5-1 Render green correctly",
                  "fullTitle": "Hack#1 Public Test Problem 5 5-1 Render green correctly",
                  "timedOut": null,
                  "duration": 4469,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const test = ['m', 'a', 'n', 'b', 'c', 'enter'];\nfor (let i = 0; i < test.length; i += 1) {\n  cy.get('body').type(`{${test[i]}}`);\n}\ncy.get('.Keyboard-container > .Keyboard-row > #char_n').should('have.class', 'green').and('have.text', 'n');\ncy.get('.Keyboard-container > .Keyboard-row > #char_m').should('have.class', 'green').and('have.text', 'm');\ncy.get('.Keyboard-container > .Keyboard-row > #char_a').should('have.text', 'a').not('have.class', 'green').not('have.class', 'yellow');\ncy.get('.Keyboard-container > .Keyboard-row > #char_b').should('have.text', 'b').not('have.class', 'green').not('have.class', 'yellow');\ncy.get('.Keyboard-container > .Keyboard-row > #char_c').should('have.text', 'c').not('have.class', 'green').not('have.class', 'yellow');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: expected '<div#char_n.Keyboard-char.undefined>' to have class 'green'",
                    "estack": "AssertionError: Timed out retrying after 4000ms: expected '<div#char_n.Keyboard-char.undefined>' to have class 'green'\n    at Context.eval (webpack:///./cypress/e2e/public.cy.js:207:68)",
                    "diff": null
                  },
                  "uuid": "42f6f2ab-b90c-4e2a-978e-0c52f8cd797c",
                  "parentUUID": "d367a401-84f1-428f-8317-b2e67be7e345",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5-2 Multiple Lines",
                  "fullTitle": "Hack#1 Public Test Problem 5 5-2 Multiple Lines",
                  "timedOut": null,
                  "duration": 5025,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const tests = [['a', 'b', 'c', 'e', 'f', 'enter'], ['n', 'b', 'c', 'e', 'f', 'enter'], ['m', 'n', 'c', 'e', 'f', 'enter'], ['m', 'u', 'n', 'e', 'f', 'enter'], ['m', 'u', 'n', 's', 'i', 'enter'], ['a', 'b', 'c', 'e', 'f', 'enter']]; // key match with \"w i n d y\"\nconst key_match = [['', '', '', '', ''], ['', '', 'yellow', '', ''], ['green', '', 'yellow', '', ''], ['green', '', 'green', 'yellow', ''], ['green', 'yellow', 'green', 'yellow', 'yellow'], ['green', 'yellow', 'green', 'yellow', 'yellow']];\nfor (let line = 0; line < tests.length; line += 1) {\n  for (let i = 0; i < tests[0].length; i += 1) {\n    cy.get('body').type(`{${tests[line][i]}}`);\n  }\n  for (let i = 0; i < KBrow_1.length; i++) {\n    if (!solList.includes(KBrow_1[i])) {\n      cy.get('.Keyboard-container > #KBrow_1 > #char_' + KBrow_1[i]).should('have.text', KBrow_1[i]).not('have.class', 'green').not('have.class', 'yellow');\n    } else {\n      if (key_match[line][solList.indexOf(KBrow_1[i])]) {\n        cy.get('.Keyboard-container > #KBrow_1 > #char_' + KBrow_1[i]).should('have.text', KBrow_1[i]).and('have.class', key_match[line][solList.indexOf(KBrow_1[i])]);\n      } else {\n        cy.get('.Keyboard-container > #KBrow_1 > #char_' + KBrow_1[i]).should('have.text', KBrow_1[i]).not('have.class', 'green').not('have.class', 'yellow');\n      }\n    }\n  }\n  for (let i = 0; i < KBrow_2.length; i++) {\n    if (!solList.includes(KBrow_2[i])) {\n      cy.get('.Keyboard-container > #KBrow_2 > #char_' + KBrow_2[i]).should('have.text', KBrow_2[i]).not('have.class', 'green').not('have.class', 'yellow');\n    } else {\n      if (key_match[line][solList.indexOf(KBrow_2[i])]) {\n        cy.get('.Keyboard-container > #KBrow_2 > #char_' + KBrow_2[i]).should('have.text', KBrow_2[i]).and('have.class', key_match[line][solList.indexOf(KBrow_2[i])]);\n      } else {\n        cy.get('.Keyboard-container > #KBrow_2 > #char_' + KBrow_2[i]).should('have.text', KBrow_2[i]).not('have.class', 'green').not('have.class', 'yellow');\n      }\n    }\n  }\n  for (let i = 0; i < KBrow_3.length; i++) {\n    if (!solList.includes(KBrow_3[i])) {\n      cy.get('.Keyboard-container > #KBrow_3 > #char_' + KBrow_3[i]).should('have.text', KBrow_3[i]).not('have.class', 'green').not('have.class', 'yellow');\n    } else {\n      if (key_match[line][solList.indexOf(KBrow_3[i])]) {\n        cy.get('.Keyboard-container > #KBrow_3 > #char_' + KBrow_3[i]).should('have.text', KBrow_3[i]).and('have.class', key_match[line][solList.indexOf(KBrow_3[i])]);\n      } else {\n        cy.get('.Keyboard-container > #KBrow_3 > #char_' + KBrow_3[i]).should('have.text', KBrow_3[i]).not('have.class', 'green').not('have.class', 'yellow');\n      }\n    }\n  }\n}",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: expected '<div#char_n.Keyboard-char.undefined>' to have class 'yellow'",
                    "estack": "AssertionError: Timed out retrying after 4000ms: expected '<div#char_n.Keyboard-char.undefined>' to have class 'yellow'\n    at Context.eval (webpack:///./cypress/e2e/public.cy.js:293:29)",
                    "diff": null
                  },
                  "uuid": "aba87bf1-9fd6-4be2-8a0f-e6c8b285a44b",
                  "parentUUID": "d367a401-84f1-428f-8317-b2e67be7e345",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "42f6f2ab-b90c-4e2a-978e-0c52f8cd797c",
                "aba87bf1-9fd6-4be2-8a0f-e6c8b285a44b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 9494,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74a8a80d-c4ee-4521-854a-2f53e23f1dae",
              "title": "Problem 6",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "6-1 Show winning info",
                  "fullTitle": "Hack#1 Public Test Problem 6 6-1 Show winning info",
                  "timedOut": null,
                  "duration": 4445,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const tests = [['a', 'b', 'c', 'e', 'f', 'enter'], ['n', 'b', 'c', 'e', 'f', 'enter'], ['m', 'n', 'c', 'e', 'f', 'enter'], ['m', 'u', 'n', 's', 'i', 'enter'], ['m', 'i', 'n', 'u', 's', 'enter']];\nfor (let line = 0; line < tests.length; line += 1) {\n  for (let i = 0; i < tests[0].length; i += 1) {\n    cy.get('body').type(`{${tests[line][i]}}`);\n  }\n  if (line != tests.length - 1) {\n    cy.get('.Wordle-lose').should('have.class', 'Hidden');\n  }\n}\ncy.get('.Wordle-win').should('have.text', 'You win!!!!');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.Wordle-lose`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.Wordle-lose`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/public.cy.js:321:43)",
                    "diff": null
                  },
                  "uuid": "7e6a9b69-c62c-4579-a47f-695720cf3068",
                  "parentUUID": "74a8a80d-c4ee-4521-854a-2f53e23f1dae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6-2 Show losing info",
                  "fullTitle": "Hack#1 Public Test Problem 6 6-2 Show losing info",
                  "timedOut": null,
                  "duration": 4494,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const tests = [['a', 'b', 'c', 'e', 'f', 'enter'], ['n', 'b', 'c', 'e', 'f', 'enter'], ['m', 'n', 'c', 'e', 'f', 'enter'], ['m', 'u', 'n', 'e', 'f', 'enter'], ['m', 'u', 'n', 's', 'i', 'enter'], ['a', 'b', 'c', 'e', 'f', 'enter']];\nfor (let line = 0; line < tests.length; line += 1) {\n  for (let i = 0; i < tests[0].length; i += 1) {\n    cy.get('body').type(`{${tests[line][i]}}`);\n  }\n  if (line != tests.length - 1) {\n    cy.get('.Wordle-lose').should('have.class', 'Hidden');\n  }\n}\ncy.get('.Wordle-lose').not('have.class', 'Hidden').should('have.text', 'You lose!!!! The answer is ' + solution + '.');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.Wordle-lose`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.Wordle-lose`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/public.cy.js:340:43)",
                    "diff": null
                  },
                  "uuid": "dfba400d-acdc-4f89-be06-d4d51623d234",
                  "parentUUID": "74a8a80d-c4ee-4521-854a-2f53e23f1dae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7e6a9b69-c62c-4579-a47f-695720cf3068",
                "dfba400d-acdc-4f89-be06-d4d51623d234"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8939,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results",
        "overwrite": true,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}